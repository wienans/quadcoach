openapi: 3.0.0
info:
  title: Practice Plans API
  version: 0.2.0
  description: |
    Practice Plan management with duration constraints (0-1000 minutes) and access concealment.
    Unauthorized users receive 404 for non-accessible plan IDs.
paths:
  /api/practice-plans:
    post:
      summary: Create new practice plan with default sections
      description: |
        Creates a new plan with default sections (server-defined). Name must be non-empty.
        All section target durations are initialized within allowed bounds (0-1000).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Non-empty plan name
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
              required: [name]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PracticePlan'
        '400':
          description: Validation error (e.g. negative or >1000 duration values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/practice-plans/{id}:
    get:
      summary: Get practice plan by id
      description: Returns 404 if plan does not exist OR requester lacks access (concealment).
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PracticePlan' } } } }
        '404': { description: Not found (missing or not accessible) }
    patch:
      summary: Update (partial) practice plan
      description: |
        Applies partial updates. Validation enforces each duration field (section.targetDuration,
        break.duration, exercise.durationOverride) is between 0 and 1000 inclusive. Negative values
        yield path-specific "negative" errors; values > 1000 yield "exceedsMax".
        Returns 404 for non-existent or non-accessible plan IDs.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PracticePlanPatch'
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/PracticePlan' } } } }
        '400': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ValidationError' } } } }
        '404': { description: Not found (missing or not accessible) }
    delete:
      summary: Delete practice plan
      description: Returns 404 if plan missing or not accessible to requester.
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '204': { description: Deleted }
        '404': { description: Not found (missing or not accessible) }
  /api/practice-plans/{id}/access:
    post:
      summary: Grant access to a coach
      description: Owner or editor can grant view/edit. 404 concealment for unauthorized user.
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coachId:
                  type: string
                access:
                  type: string
                  enum: [view, edit]
              required: [coachId, access]
      responses:
        '200': { description: Updated access list, content: { application/json: { schema: { $ref: '#/components/schemas/PracticePlanAccessList' } } } }
        '404': { description: Not found (missing or not accessible) }
  /api/practice-plans/{id}/access/{accessId}:
    delete:
      summary: Revoke access entry
      description: Owner or editor only. 404 concealment for unauthorized user.
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
        - in: path
          name: accessId
          schema: { type: string }
          required: true
      responses:
        '200': { description: Updated access list, content: { application/json: { schema: { $ref: '#/components/schemas/PracticePlanAccessList' } } } }
        '404': { description: Not found (missing or not accessible) }
components:
  schemas:
    Duration:
      type: integer
      minimum: 0
      maximum: 1000
      description: Duration minutes (inclusive bounds 0-1000)
    PracticePlan:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string }
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
        user: { type: string }
        access:
          type: array
          description: Access entries (view/edit) including owner with implicit edit
          items: { $ref: '#/components/schemas/PracticePlanAccess' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, name, sections, user, createdAt, updatedAt]
    Section:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        targetDuration: { $ref: '#/components/schemas/Duration' }
        groups:
          type: array
          items: { $ref: '#/components/schemas/Group' }
      required: [id, name, targetDuration, groups]
    Group:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/Item' }
      required: [id, name, items]
    Item:
      oneOf:
        - $ref: '#/components/schemas/ExerciseItem'
        - $ref: '#/components/schemas/BreakItem'
    ExerciseItem:
      type: object
      properties:
        id: { type: string }
        kind: { type: string, enum: ['exercise'] }
        exerciseId: { type: string }
        durationOverride:
          allOf:
            - $ref: '#/components/schemas/Duration'
          description: Optional override of canonical exercise duration
      required: [id, kind, exerciseId]
    BreakItem:
      type: object
      properties:
        id: { type: string }
        kind: { type: string, enum: ['break'] }
        name: { type: string }
        duration: { $ref: '#/components/schemas/Duration' }
      required: [id, kind, name, duration]
    PracticePlanPatch:
      type: object
      description: Partial updatable fields; unspecified fields unchanged
      properties:
        name: { type: string }
        description: { type: string }
        tags:
          type: array
          items: { type: string }
        sections:
          type: array
          items: { $ref: '#/components/schemas/Section' }
    PracticePlanAccess:
      type: object
      properties:
        id: { type: string }
        user: { type: string }
        practicePlan: { type: string }
        access: { type: string, enum: [view, edit] }
        createdAt: { type: string, format: date-time }
      required: [id, user, practicePlan, access, createdAt]
    PracticePlanAccessList:
      type: object
      properties:
        practicePlanId: { type: string }
        access:
          type: array
          items: { $ref: '#/components/schemas/PracticePlanAccess' }
      required: [practicePlanId, access]
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: Validation failed
        errors:
          type: array
          description: Array of field-specific error strings with path and code
          items:
            type: string
            example: sections[0].targetDuration exceedsMax
      required: [message, errors]
